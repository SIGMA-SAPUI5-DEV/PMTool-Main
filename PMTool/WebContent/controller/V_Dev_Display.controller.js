sap.ui.define([
	"sap/ui/core/mvc/Controller",
	"sap/ui/core/routing/History",
	"sap/m/MessageToast"
], function(Controller, History, MessageToast) {
	"use strict";
	var oObjnr;
	var sMsg;
	var oCancelTable;
	var aIndex;
	return Controller.extend("ZNav.controller.V_Dev_Display", {
		/**
		 * Called when a controller is instantiated and its View controls (if available) are already created.
		 * Can be used to modify the View before it is displayed, to bind event handlers and do other one-time initialization.
		 * @memberOf ZNav.view.V_Dev_Display
		 */
			onInit: function() {
			this.oTable = this.getView().byId("Dev_Table");
			this.oModel = this.getView().getModel();
			this.rebindTable();
			},
			
			rebindTable: function(){
			this.oTable.bindRows({
			path: "/DevMasterSet",
			Key: ["Zdeveloper"]
			});
			},
		
		/**
		 * Similar to onAfterRendering, but this hook is invoked before the controller's View is re-rendered
		 * (NOT before the first rendering! onInit() is used for that one!).
		 * @memberOf ZNav.view.V_Dev_Display
		 */
		//	onBeforeRendering: function() {
		//
		//	},
		/**
		 * Called when the View has been rendered (so its HTML is part of the document). Post-rendering manipulations of the HTML could be done here.
		 * This hook is the same one that SAPUI5 controls get after being rendered.
		 * @memberOf ZNav.view.V_Dev_Display
		 */
		//	onAfterRendering: function() {
		//
		//	},
		/**
		 * Called when the Controller is destroyed. Use this one to free resources and finalize activities.
		 * @memberOf ZNav.view.V_Dev_Display
		 */
			onExit: function() {
	            	this.aDevMasterSet = [];
			},
		/**
		 *@memberOf ZNav.controller.V_Dev_Display
		 */
		fGoToTarget_1: function() {
			//This code was generated by the layout editor.
			//This code was generated by the layout editor.
			var oHistory = History.getInstance();
			var sPreviousHash = oHistory.getPreviousHash();
			// Go one screen back if you find a Hash
			if (sPreviousHash !== undefined) {
				window.history.go(-1);
			} // If you do not find a correct Hash, go to the Source screen using default router;
			else {
				var oRouter = sap.ui.core.UIComponent.getRouterFor(this);
				oRouter.navTo("", true);
			}
		},
		/**
		 *@memberOf ZNav.controller.V_Dev_Display
		 */
		fGoToDevCreate: function() {
			//This code was generated by the layout editor.
			var oRouter = sap.ui.core.UIComponent.getRouterFor(this);
			// Tell the Router to Navigate To Route_Tar_1
			oRouter.navTo("Route_Dev_Create", {});
		},
		fGoToDevCopy: function() {
			//This code was generated by the layout editor.
		    var oTable = this.getView().byId("Dev_Table");
			var aIndex = oTable.getSelectedIndex();
			var selectedRow = oTable.getRows()[aIndex];
			var path = selectedRow.getBindingContext().getPath();
        	var obj = oTable.getModel().getProperty(path);
			
var oRouter = sap.ui.core.UIComponent.getRouterFor(this);
			// Tell the Router to Navigate To Route_Tar_1
		   //obj.ZprStdate = "";
		   //obj.ZprEndate = "";
		   
				if ( obj.ZdeveloperName == "" )
			{
				obj.ZdeveloperName = " ";
			}
				if ( obj.Zactive == "" )
			{
				obj.Zactive = " ";
			}
		oRouter.navTo("Route_Dev_Copy", {
				Developer: obj.Zdeveloper,
				Name: obj.ZdeveloperName,
				Active: obj.Zactive
				
							});				
		},		
		/**
		 *@memberOf ZNav.controller.V_Dev_Display
		 */
		 
		 	fChangeDev: function() {
	        var oTable = this.getView().byId("Dev_Table");
			var oModel = oTable.getModel();
			this.aDevMasterSet = jQuery.extend(true, [], oModel.getProperty("/DevMasterSet"));
			//this.getView().byId("idCopy").setVisible(false);
			this.getView().byId("idDevChange").setVisible(false);
			// this.getView().byId("idDevDelete").setVisible(false);
			this.getView().byId("idDevSave").setVisible(true);
			this.getView().byId("idDevCancel").setVisible(true);
			 aIndex = oTable.getSelectedIndex();
			sMsg = oTable.getContextByIndex(aIndex);
			// alert(sMsg);
			var selectedRow = oTable.getRows()[aIndex];
			for (var i = 1; i < 3; i++) {
				selectedRow.getCells()[i].setProperty("editable", true);
			}
		//	oModel.setProperty("/DevMasterSet", this.aDevMasterSet);
			this.rebindTable();
			
		},
		
			fCancelFromDev: function () {
			// var oPage = this.getView().byId("trans_page");
			// oPage.setShowFooter(false);
			
		//	this.getView().byId("idCopy").setVisible(true);
			this.getView().byId("idDevChange").setVisible(true);
			// this.getView().byId("idDevDelete").setVisible(true);
			this.getView().byId("idDevSave").setVisible(false);
			this.getView().byId("idDevCancel").setVisible(false);
			// var oModel = this.getView().getModel();
			// oModel.resetChanges(["/TransTrackerSet('1')"]);
			var oTable = this.getView().byId("Dev_Table");
			var oModel = oTable.getModel();
			oModel.setProperty("/DevMasterSet", this.aDevMasterSet);
			this.rebindTable();
			var selectedRow = oTable.getRows()[aIndex];
			for (var i = 1; i < 3; i++) {
				selectedRow.getCells()[i].setProperty("editable", false);
			}
			},
		
		
	fSaveChangeDev: function () {
			var oTable = this.getView().byId("Dev_Table");
			// var aIndex = oTable.getSelectedIndex();
			var selectedRow = oTable.getRows()[aIndex];
			var path = selectedRow.getBindingContext().getPath();
        	var obj = oTable.getModel().getProperty(path);
			
			var contexts = oTable.getContextByIndex(aIndex);
			var set = contexts.sPath;
				
			/*create operation*/
			var oModel = this.getView().getModel();
			var oEntry = {};
			oEntry.Zdeveloper =obj.Zdeveloper;
            oEntry.ZdeveloperName = selectedRow.getCells()[1].getProperty("value");
            oEntry.Zactive = selectedRow.getCells()[2].getProperty("value");
			oModel.update(set, oEntry, {
				method: "PUT",
				success: function(data) {
					MessageToast.show("Record has been saved");
				},
				error: function(e) {
					alert("error");
				}
			});
						for (var i = 1; i < 3; i++) {
				selectedRow.getCells()[i].setProperty("editable", false);
		//	this.getView().byId("idCopy").setVisible(true);
			this.getView().byId("idDevChange").setVisible(true);
			// this.getView().byId("idDevDelete").setVisible(true);
			this.getView().byId("idDevSave").setVisible(false);
			this.getView().byId("idDevCancel").setVisible(false);
			}
		},
		/**
		 *@memberOf ZNav.controller.V_Dev_Display
		 */
		fDeleteDevEntry: function()
		{
			
		/*delete operation*/
         var oModel = this.getView().getModel();
         var oTable = this.getView().byId("Dev_Table");
		 aIndex = oTable.getSelectedIndex();
		 var contexts = oTable.getContextByIndex(aIndex);
		 var set = contexts.sPath;
		 oModel.remove(set, {
        method: "DELETE",
       success: function(data) {
            alert("success");
        },
         error: function(e) {
              alert("error");
  }
 });			
		},
		
	});
});